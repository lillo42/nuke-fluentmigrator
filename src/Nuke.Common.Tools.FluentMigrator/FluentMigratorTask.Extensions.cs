using JetBrains.Annotations;
using Nuke.Common.Tooling;

namespace Nuke.Common.Tools.FluentMigrator
{
    public static class FluentMigratorSettingExtensions
    {
        /// <summary>
        /// Set the connection string. <see cref="FluentMigratorTask.FluentMigratorSetting.ConnectionString"/>
        /// </summary>
        /// <param name="toolSettings">The <see cref="T"/>.</param>
        /// <param name="connectionString">The connection string</param>
        /// <typeparam name="T"></typeparam>
        /// <returns>New instance (copy) of <see cref="T"/>.</returns>
        [Pure]
        public static T SetConnectionString<T>(this T toolSettings, string connectionString)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = connectionString;
            return toolSettings;
        }

        /// <summary>
        /// Set to not use connection. <see cref="FluentMigratorTask.FluentMigratorSetting.NoConnectionString"/>
        /// </summary>
        /// <param name="toolSettings">The <see cref="T"/>.</param>
        /// <typeparam name="T"></typeparam>
        /// <returns>New instance (copy) of <see cref="T"/>.</returns>
        [Pure]
        public static T NoConnectionString<T>(this T toolSettings)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConnectionString = null;
            return toolSettings;
        }

        /// <summary>
        /// Set the namespace contains the migrations you want to run. <see cref="FluentMigratorTask.FluentMigratorSetting.Namespace"/>
        /// </summary>
        /// <param name="toolSettings">The <see cref="T"/>.</param>
        /// <param name="namespace">The namespace.</param>
        /// <typeparam name="T"></typeparam>
        /// <returns>New instance (copy) of <see cref="T"/>.</returns>
        [Pure]
        public static T SetNamespace<T>(this T toolSettings, string @namespace)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = @namespace;
            return toolSettings;
        }

        /// <summary>
        /// Set the assemblies containing the migrations you want to execute. <see cref="FluentMigratorTask.FluentMigratorSetting.Assembly"/>
        /// </summary>
        /// <param name="toolSettings">The <see cref="T"/>.</param>
        /// <param name="assembly">The assembly.</param>
        /// <typeparam name="T"></typeparam>
        /// <returns>New instance (copy) of <see cref="T"/>.</returns>
        [Pure]
        public static T SetAssembly<T>(this T toolSettings, string assembly)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Assembly = assembly;
            return toolSettings;
        }

        
        /// <summary>
        /// Set to generate SQL script and not execute it. 
        /// </summary>
        /// <param name="toolSettings">The <see cref="T"/>.</param>
        /// <param name="preview">If should or shouldn't use preview</param>
        /// <typeparam name="T"></typeparam>
        /// <returns>New instance (copy) of <see cref="T"/>.</returns>
        [Pure]
        public static T SetPreview<T>(this T toolSettings, bool preview)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Preview = preview;
            return toolSettings;
        }

        /// <summary>
        /// Only output the SQL generated by the migration - do not execute it. 
        /// </summary>
        /// <param name="toolSettings">The <see cref="T"/>.</param>
        /// <typeparam name="T"></typeparam>
        /// <returns>New instance (copy) of <see cref="T"/>.</returns>
        [Pure]
        public static T EnablePreview<T>(this T toolSettings)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Preview = true;
            return toolSettings;
        }

        /// <summary>
        /// Don't allow output the SQL generated by the migration. 
        /// </summary>
        /// <param name="toolSettings">The <see cref="T"/>.</param>
        /// <typeparam name="T"></typeparam>
        /// <returns>New instance (copy) of <see cref="T"/>.</returns>
        [Pure]
        public static T DisablePreview<T>(this T toolSettings)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Preview = false;
            return toolSettings;
        }

        [Pure]
        public static T SetProfile<T>(this T toolSettings, string profile)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profile = profile;
            return toolSettings;
        }

        [Pure]
        public static T SetTimeout<T>(this T toolSettings, int timeout)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }

        [Pure]
        public static T SetOutput<T>(this T toolSettings, string output)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }

        [Pure]
        public static T SetNested<T>(this T toolSettings, bool nested)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Nested = nested;
            return toolSettings;
        }

        [Pure]
        public static T EnableNested<T>(this T toolSettings)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Nested = true;
            return toolSettings;
        }

        [Pure]
        public static T DisableNested<T>(this T toolSettings)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Nested = false;
            return toolSettings;
        }

        [Pure]
        public static T SetStartVersions<T>(this T toolSettings, int? timeout)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StartVersions = timeout;
            return toolSettings;
        }

        [Pure]
        public static T SetWorkingDirectory<T>(this T toolSettings, string workingDirectory)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }

        [Pure]
        public static T SetTag<T>(this T toolSettings, string tag)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tag = tag;
            return toolSettings;
        }

        [Pure]
        public static T SetAllowBreakingChanges<T>(this T toolSettings, bool allowBreakingChanges)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowBreakingChanges = allowBreakingChanges;
            return toolSettings;
        }

        [Pure]
        public static T EnableBreakingChanges<T>(this T toolSettings)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowBreakingChanges = true;
            return toolSettings;
        }

        [Pure]
        public static T DisableBreakingChanges<T>(this T toolSettings)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowBreakingChanges = false;
            return toolSettings;
        }

        [Pure]
        public static T SetVerbose<T>(this T toolSettings, bool verbose)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }

        [Pure]
        public static T EnableVerbose<T>(this T toolSettings)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = true;
            return toolSettings;
        }

        [Pure]
        public static T DisableVerbose<T>(this T toolSettings)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = false;
            return toolSettings;
        }

        [Pure]
        public static T SetProcessor<T>(this T toolSettings, Processor processor)
            where T : FluentMigratorTask.FluentMigratorSetting
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Processor = processor;
            return toolSettings;
        }
    }
    
    public static class FluentMigratorRollbackSettingExtensions
    {

        [Pure]
        public static T SetTransactionMode<T>(this T toolSetting, TransactionMode transactionMode)
            where T : FluentMigratorTask.FluentMigratorRollbackSetting
        {
            toolSetting = toolSetting.NewInstance();
            toolSetting.TransactionMode = transactionMode;
            return toolSetting;
        }
        
        [Pure]
        public static T SetStep<T>(this T toolSetting, int step)
            where T : FluentMigratorTask.FluentMigratorRollbackBySetting
        {
            toolSetting = toolSetting.NewInstance();
            toolSetting.Step = step;
            return toolSetting;
        }
        
        [Pure]
        public static T SetTo<T>(this T toolSetting, long version)
            where T : FluentMigratorTask.FluentMigratorRollbackToSetting
        {
            toolSetting = toolSetting.NewInstance();
            toolSetting.Version = version;
            return toolSetting;
        }
    }

    public static class FluentMigratorMigrateSettingExtensions
    {
        [Pure]
        public static T SetTransactionMode<T>(this T toolSetting, TransactionMode transactionMode)
            where T : FluentMigratorTask.FluentMigratorMigrateSetting
        {
            toolSetting = toolSetting.NewInstance();
            toolSetting.TransactionMode = transactionMode;
            return toolSetting;
        }
        
        [Pure]
        public static T SetTarget<T>(this T toolSetting, long target)
            where T : FluentMigratorTask.FluentMigratorMigrateSetting
        {
            toolSetting = toolSetting.NewInstance();
            toolSetting.Target = target;
            return toolSetting;
        }
        
        [Pure]
        public static T SetStrip<T>(this T toolSetting, bool strip)
            where T : FluentMigratorTask.FluentMigratorMigrateDownSetting
        {
            toolSetting = toolSetting.NewInstance();
            toolSetting.Strip = strip;
            return toolSetting;
        }
        
        [Pure]
        public static T EnableStrip<T>(this T toolSetting)
            where T : FluentMigratorTask.FluentMigratorMigrateDownSetting
        {
            toolSetting = toolSetting.NewInstance();
            toolSetting.Strip = true;
            return toolSetting;
        }
        
        [Pure]
        public static T DisableStrip<T>(this T toolSetting)
            where T : FluentMigratorTask.FluentMigratorMigrateDownSetting
        {
            toolSetting = toolSetting.NewInstance();
            toolSetting.Strip = false;
            return toolSetting;
        }
    }
}